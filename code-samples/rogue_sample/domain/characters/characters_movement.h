/**
 * @file
 * @brief Заголовочный файл, описывающий интерфейс взаимодействия персонажей и окружения
 * 
 * В данном файле описаны передвижения монстров по комнате, передвижение игрока по комнате, а также взаимодействие игрока с противниками в смысле их уровня враждебности
 * @author Кантеров Роман
 * @version 0.3
 * @date Последнее изменение: 16 июля 2024 года
*/


#ifndef CHARACTERS_MOVEMENT_H__
#define CHARACTERS_MOVEMENT_H__

#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "graph.h"
#include "vector.h"
#include "random.h"
#include "entities.h"
#include "character_movement_consts.h"
#include "consumables_actions.h"

typedef vector*(*npc_movement_func)(const monster_t *, const level_t *);

#define MAX_TRIES_TO_MOVE 16

/**
 * @brief Функция передвижения персонажа в пространстве на одну "клетку"
 * 
 * Функция на основе переданного направления меняет координаты x y объекта. Проверок на выход за пределы пространства не выполняется
 * @param[in] direction Направление, по которому будет передвинут персонаж
 * @param[in, out] character_geometry Геометрическая составляющая сущности персонажа, в которой хранятся её координаты
*/
void move_character_by_direction(directions_e direction, object_t *character_geometry);

/**
 * @brief Функция передвижения противника согласно его паттерну
 * 
 * Функция использует паттерн, зависящий от конкретного типа противника (выбор паттерна происходит внутри функции), после чего при помощи move_character() изменяет его положение.
 * @param[in, out] monster Информация о монстре, которого надо переместить
 * @param[in] player_coordinates Положение игрока
 * @param[in] level Данные об уровне
*/
void move_monster(monster_t *monster, const object_t *player_coordinates, const level_t *level);

/**
 * @defgroup monster_patterns Паттерны передвижения монстров
 * @brief Модуль описывает паттерны, согласно которым монстры будут передвигаться по комнате
 * 
 * Каждый монстр имеет уникальный паттерн передвижения. Все они учитывают ситуации, когда игрок подходит слишком быстро, после чего монстр начинают преследование. Монстр преследует игрока до самой смерти. При преследовании скорость увеличивается.
*/
///@{
    /**
     * @brief Функция, определяющая направление движения зомби
     * 
     * Функция описывает алгоритм, согласно которому выбирается направление, по которому должен идти зомби. При выборе проверяется, что зомби не выходит за пределы комнаты
     * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности зомби
     * @param[in] player_coordinates Положение игрока
     * @param[in] level Данные об уровне
     * @return направление, куда будет двигаться зомби
    */
    vector *pattern_zombie(const monster_t *monster, const level_t *level);

    /**
     * @brief Функция, определяющая направление движения вампира
     * 
     * Функция описывает алгоритм, согласно которому выбирается направление, по которому должен идти вампир. При выборе проверяется, что вампир не выходит за пределы комнаты
     * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности вампира
     * @param[in] player_coordinates Положение игрока
     * @param[in] level Данные об уровне
     * @return направление, куда будет двигаться вампир
    */
    vector *pattern_vampire(const monster_t *monster, const level_t *level);

    /**
     * @brief Функция, определяющая направление движения призрака
     * 
     * Функция описывает алгоритм, согласно которому выбирается направление, по которому должен идти призрак. При выборе проверяется, что призрак не выходит за пределы комнаты
     * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности призрака
     * @param[in] player_coordinates Положение игрока
     * @param[in] level Данные об уровне
     * @return направление, куда будет двигаться призрак
    */
    vector *pattern_ghost(const monster_t *monster, const level_t *level);

    /**
     * @brief Функция, определяющая направление движения огра
     * 
     * Функция описывает алгоритм, согласно которому выбирается направление, по которому должен идти огр. При выборе проверяется, что огр не выходит за пределы комнаты
     * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности огра
     * @param[in] player_coordinates Положение игрока
     * @param[in] level Данные об уровне
     * @return направление, куда будет двигаться огр
    */
    vector *pattern_ogre(const monster_t *monster, const level_t *level);

    /**
     * @brief Функция, определяющая направление движения змеи
     * 
     * Функция описывает алгоритм, согласно которому выбирается направление, по которому должна идти змея. При выборе проверяется, что змея не выходит за пределы комнаты
     * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности змеи
     * @param[in] player_coordinates Положение игрока
     * @param[in] level Данные об уровне
     * @return направление, куда будет двигаться змея
    */
    vector *pattern_snake(const monster_t *monster, const level_t *level);
///@}

/**
 * @brief Функция, проверяющая, находится ли игрок в радиусе агра монстра
 * 
 * Радиус основывается на уровне враждебности монстра
 * @param[in] player_coordinates Местоположение игрока
 * @param[in] monster Информация о противнике, из которой будут использоваться координаты и уровень враждебности
 * @return true, если игрок в радиусе, в обратном случае false
*/
bool is_player_near(const object_t *player_coordinates, const monster_t *monster);

/**
 * @brief Функция, выполняющая перемещение игрока по пространству внутри комнаты или коридора
 * 
 * Перед передвижением проверяется, не выйдет ли игрок за пределы комнаты при помощи функции check_border()
 * @param[in] level Описание уровня, где содержится вся информация о комнатах и коридорах
 * @param[in, out] player Информация об игроке
 * @param[in] chosen_direction Направление, в котором двигается игрок
*/
void move_player(player_t *player, const level_t *level, directions_e chosen_direction);

/**
 * @brief Функция, проверяющая, находится игрок вне границ или нет
 * 
 * Для каждой из комнат и коридоров проверяется, находится ли игрок внутри, до момента пока не найдется совпадение или не закончатся объекты
 * @param[in] level Описание уровня, где содержится вся информация о комнатах и коридорах
 * @param[in] player_coordinates Информация о положении игрока в пространстве
 * @return true, если игрок вне границ, в ином случае false
*/
bool check_outside_border(const object_t *player_coordinates, const level_t *level);

/**
 * @brief Функция, находится ли персонаж вне пределов комнаты
 * @param[in] character_coords Геометрия персонажа
 * @param[in] room Данные о комнате
 * @return true, если пресонаж вне пределов, в ином случае false
*/
bool character_outside_border(const object_t *character_coords, const object_t *room);

room_t *find_current_room(const object_t *player_coords, level_t *level);

#endif // CHARACTERS_MOVEMENT_H__
